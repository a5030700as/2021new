

V1 commit 6eb1e6c39e9f006c6935185cc0beca33dca8ff31


第一步 写一个最简单的makefile 

    实现的是顶层编译 

好像出了点问题：
    1 还是不理解 -I -L -l GCC 选项的定义吧 以及 头文件 是的作用 



main.c 头文件修改 为绝对路径 编译GCC的时候 可以不指定 -I了

#include </home/snail/2021vscode/student_project/2021new/studentApp/inc/test.h>

注意： 
#include 这个是和 编译器打交道的指令 不是程序层次的
也是就是说 .c 的头文件的作用 就是 GCC -i 的作用 

=========
#include "../inc/test.h"

int main (void)
{
    printf("[file is %s]\n", __FILE__);
    return 0;
}

这次编译通过了 反而 inc/test.h 没有通过 所以说 C 源文件里面的 包含的 头文件 就是相对于 .c开始的 而不是 Makefile 
==========


那么 到底想说什么呢？
    1. 头文件 给 源文件 编译的时候 提供的符号 而符号的 查找 根据 <> 或者 "" 来决定是相对 还是决定 路径而已 
    2. Makefile 里面的 -I 则是相对当前的Makefile 来编译的 
    3. 如果 .c 头文件包含 正确的话 GCC 不需要 -I 去搜索了 
    4. .h仅仅在编译阶段被使用了 对于连接器 而言 是不知道头文件的 他的 对象是 .o 是obj对象 来去链接 文件里面的各个符号 

    gcc -o main $(OBJS) 
    这里 就是 连接器 去OBJS 寻找需要的符号了 应该是和-I无关的东西了 


#############

#	@for name in $(FullSrcName); \
	do \
	echo $$name; \
	done
makefile 一行一个程序 因此 需要注意最后的是 \+\n 

###############################


版本二：
    关于字节对齐的问题：
        如果正向 解决不了 考虑一下逆向思维咯
        一开始是打算根据随便的一个下标 去对齐字节 -3 |0x03 发现不尽人意  懒得排查了
        然后 直接 长度 / 3  然后 随机出的 数字 再乘以  3就好。
    
    